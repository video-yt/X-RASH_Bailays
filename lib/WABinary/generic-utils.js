Object.defineProperty(exports,"__esModule",{value:!0});exports.getBinaryNodeMessages=exports.reduceBinaryNodeToDictionary=exports.assertNodeErrorFree=exports.getBinaryNodeChildUInt=exports.getBinaryNodeChildString=exports.getBinaryNodeChildBuffer=exports.getBinaryNodeChild=exports.getAllBinaryNodeChildren=exports.getBinaryNodeChildren=void 0;exports.binaryNodeToString=binaryNodeToString;
const boom_1=require("@hapi/boom"),WAProto_1=require("../../WAProto"),getBinaryNodeChildren=(a,c)=>Array.isArray(null===a||void 0===a?void 0:a.content)?a.content.filter(b=>b.tag===c):[];exports.getBinaryNodeChildren=getBinaryNodeChildren;const getAllBinaryNodeChildren=({content:a})=>Array.isArray(a)?a:[];exports.getAllBinaryNodeChildren=getAllBinaryNodeChildren;
const getBinaryNodeChild=(a,c)=>{if(Array.isArray(null===a||void 0===a?void 0:a.content))return null===a||void 0===a?void 0:a.content.find(b=>b.tag===c)};exports.getBinaryNodeChild=getBinaryNodeChild;const getBinaryNodeChildBuffer=(a,c)=>{var b;a=null===(b=(0,exports.getBinaryNodeChild)(a,c))||void 0===b?void 0:b.content;if(Buffer.isBuffer(a)||a instanceof Uint8Array)return a};exports.getBinaryNodeChildBuffer=getBinaryNodeChildBuffer;
const getBinaryNodeChildString=(a,c)=>{var b;a=null===(b=(0,exports.getBinaryNodeChild)(a,c))||void 0===b?void 0:b.content;if(Buffer.isBuffer(a)||a instanceof Uint8Array)return Buffer.from(a).toString("utf-8");if("string"===typeof a)return a};exports.getBinaryNodeChildString=getBinaryNodeChildString;const getBinaryNodeChildUInt=(a,c,b)=>{if(a=(0,exports.getBinaryNodeChildBuffer)(a,c))return bufferToUInt(a,b)};exports.getBinaryNodeChildUInt=getBinaryNodeChildUInt;
const assertNodeErrorFree=a=>{if(a=(0,exports.getBinaryNodeChild)(a,"error"))throw new boom_1.Boom(a.attrs.text||"Unknown error",{data:+a.attrs.code});};exports.assertNodeErrorFree=assertNodeErrorFree;const reduceBinaryNodeToDictionary=(a,c)=>(0,exports.getBinaryNodeChildren)(a,c).reduce((b,{attrs:d})=>{b[d.name||d.config_code]=d.value||d.config_value;return b},{});exports.reduceBinaryNodeToDictionary=reduceBinaryNodeToDictionary;
const getBinaryNodeMessages=({content:a})=>{const c=[];if(Array.isArray(a))for(const b of a)"message"===b.tag&&c.push(WAProto_1.proto.WebMessageInfo.decode(b.content));return c};exports.getBinaryNodeMessages=getBinaryNodeMessages;function bufferToUInt(a,c){let b=0;for(let d=0;d<c;d++)b=256*b+a[d];return b}const tabs=a=>"\t".repeat(a);
function binaryNodeToString(a,c=0){if(!a)return a;if("string"===typeof a)return tabs(c)+a;if(a instanceof Uint8Array)return tabs(c)+Buffer.from(a).toString("hex");if(Array.isArray(a))return a.map(e=>tabs(c+1)+binaryNodeToString(e,c+1)).join("\n");const b=binaryNodeToString(a.content,c+1),d=`<${a.tag} ${Object.entries(a.attrs||{}).filter(([,e])=>void 0!==e).map(([e,f])=>`${e}='${f}'`).join(" ")}`;a=b?`>\n${b}\n${tabs(c)}</${a.tag}>`:"/>";return d+a};
