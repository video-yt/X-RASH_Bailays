var __createBinding=this&&this.__createBinding||(Object.create?function(e,b,a,c){void 0===c&&(c=a);var d=Object.getOwnPropertyDescriptor(b,a);if(!d||("get"in d?!b.__esModule:d.writable||d.configurable))d={enumerable:!0,get:function(){return b[a]}};Object.defineProperty(e,c,d)}:function(e,b,a,c){void 0===c&&(c=a);e[c]=b[a]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,b){Object.defineProperty(e,"default",{enumerable:!0,value:b})}:function(e,b){e["default"]=b}),__importStar=
this&&this.__importStar||function(){var e=function(b){e=Object.getOwnPropertyNames||function(a){var c=[],d;for(d in a)Object.prototype.hasOwnProperty.call(a,d)&&(c[c.length]=d);return c};return e(b)};return function(b){if(b&&b.__esModule)return b;var a={};if(null!=b)for(var c=e(b),d=0;d<c.length;d++)"default"!==c[d]&&__createBinding(a,b,c[d]);__setModuleDefault(a,b);return a}}();Object.defineProperty(exports,"__esModule",{value:!0});exports.makeLibSignalRepository=makeLibSignalRepository;
const libsignal=__importStar(require("libsignal")),WASignalGroup_1=require("../../WASignalGroup"),Utils_1=require("../Utils"),WABinary_1=require("../WABinary");
function makeLibSignalRepository(e){const b=signalStorage(e);return{decryptGroupMessage({group:a,authorJid:c,msg:d}){a=jidToSignalSenderKeyName(a,c);return(new WASignalGroup_1.GroupCipher(b,a)).decrypt(d)},async processSenderKeyDistributionMessage({item:a,authorJid:c}){const d=new WASignalGroup_1.GroupSessionBuilder(b);c=jidToSignalSenderKeyName(a.groupId,c);a=new WASignalGroup_1.SenderKeyDistributionMessage(null,null,null,null,a.axolotlSenderKeyDistributionMessage);const {[c]:f}=await e.keys.get("sender-key",
[c]);f||await b.storeSenderKey(c,new WASignalGroup_1.SenderKeyRecord);await d.process(c,a)},async decryptMessage({jid:a,type:c,ciphertext:d}){a=jidToSignalProtocolAddress(a);a=new libsignal.SessionCipher(b,a);let f;switch(c){case "pkmsg":f=await a.decryptPreKeyWhisperMessage(d);break;case "msg":f=await a.decryptWhisperMessage(d)}return f},async encryptMessage({jid:a,data:c}){a=jidToSignalProtocolAddress(a);a=new libsignal.SessionCipher(b,a);const {type:d,body:f}=await a.encrypt(c);return{type:3===
d?"pkmsg":"msg",ciphertext:Buffer.from(f,"binary")}},async encryptGroupMessage({group:a,meId:c,data:d}){a=jidToSignalSenderKeyName(a,c);c=new WASignalGroup_1.GroupSessionBuilder(b);const {[a]:f}=await e.keys.get("sender-key",[a]);f||await b.storeSenderKey(a,new WASignalGroup_1.SenderKeyRecord);c=await c.create(a);return{ciphertext:await (new WASignalGroup_1.GroupCipher(b,a)).encrypt(d),senderKeyDistributionMessage:c.serialize()}},async injectE2ESession({jid:a,session:c}){await (new libsignal.SessionBuilder(b,
jidToSignalProtocolAddress(a))).initOutgoing(c)},jidToSignalProtocolAddress(a){return jidToSignalProtocolAddress(a).toString()}}}const jidToSignalProtocolAddress=e=>{const {user:b,device:a}=(0,WABinary_1.jidDecode)(e);return new libsignal.ProtocolAddress(b,a||0)},jidToSignalSenderKeyName=(e,b)=>(new WASignalGroup_1.SenderKeyName(e,jidToSignalProtocolAddress(b))).toString();
function signalStorage({creds:e,keys:b}){return{loadSession:async a=>{({[a]:a}=await b.get("session",[a]));if(a)return libsignal.SessionRecord.deserialize(a)},storeSession:async(a,c)=>{await b.set({session:{[a]:c.serialize()}})},isTrustedIdentity:()=>!0,loadPreKey:async a=>{a=a.toString();({[a]:a}=await b.get("pre-key",[a]));if(a)return{privKey:Buffer.from(a.private),pubKey:Buffer.from(a.public)}},removePreKey:a=>b.set({"pre-key":{[a]:null}}),loadSignedPreKey:()=>{const a=e.signedPreKey;return{privKey:Buffer.from(a.keyPair.private),
pubKey:Buffer.from(a.keyPair.public)}},loadSenderKey:async a=>{({[a]:a}=await b.get("sender-key",[a]));if(a)return new WASignalGroup_1.SenderKeyRecord(a)},storeSenderKey:async(a,c)=>{await b.set({"sender-key":{[a]:c.serialize()}})},getOurRegistrationId:()=>e.registrationId,getOurIdentity:()=>{const {signedIdentityKey:a}=e;return{privKey:Buffer.from(a.private),pubKey:(0,Utils_1.generateSignalPubKey)(a.public)}}}};
