Object.defineProperty(exports,"__esModule",{value:!0});exports.makeNoiseHandler=void 0;
const boom_1=require("@hapi/boom"),WAProto_1=require("../../WAProto"),Defaults_1=require("../Defaults"),WABinary_1=require("../WABinary"),crypto_1=require("./crypto"),generateIV=m=>{const n=new ArrayBuffer(12);(new DataView(n)).setUint32(8,m);return new Uint8Array(n)},makeNoiseHandler=({keyPair:{private:m,public:n},NOISE_HEADER:v,logger:p,routingInfo:q})=>{p=p.child({class:"ns"});const h=a=>{g||(e=(0,crypto_1.sha256)(Buffer.concat([e,a])))},x=a=>{a=(0,crypto_1.aesEncryptGCM)(a,w,generateIV(k),e);
k+=1;h(a);return a},t=a=>{var b=generateIV(g?r:k);b=(0,crypto_1.aesDecryptGCM)(a,y,b,e);g?r+=1:k+=1;h(a);return b},C=async a=>{a=await (0,crypto_1.hkdf)(Buffer.from(a),64,{salt:B,info:""});return[a.slice(0,32),a.slice(32)]},u=async a=>{const [b,c]=await C(a);B=b;y=w=c;k=r=0},z=Buffer.from(Defaults_1.NOISE_MODE);let e=32===z.byteLength?z:(0,crypto_1.sha256)(z),B=e,w=e,y=e,r=0,k=0,g=!1,A=!1,d=Buffer.alloc(0);h(v);h(n);return{encrypt:x,decrypt:t,authenticate:h,mixIntoKey:u,finishInit:async()=>{const [a,
b]=await C(new Uint8Array(0));w=a;y=b;e=Buffer.from([]);k=r=0;g=!0},processHandshake:async({serverHello:a},b)=>{h(a.ephemeral);await u(crypto_1.Curve.sharedKey(m,a.ephemeral));var c=t(a.static);await u(crypto_1.Curve.sharedKey(m,c));c=t(a.payload);({intermediate:c}=WAProto_1.proto.CertChain.decode(c));({issuerSerial:c}=WAProto_1.proto.CertChain.NoiseCertificate.Details.decode(c.details));if(c!==Defaults_1.WA_CERT_DETAILS.SERIAL)throw new boom_1.Boom("certification match failed",{statusCode:400});
c=x(b.public);await u(crypto_1.Curve.sharedKey(b.private,a.ephemeral));return c},encodeFrame:a=>{g&&(a=x(a));let b;q?(b=Buffer.alloc(7),b.write("ED",0,"utf8"),b.writeUint8(0,2),b.writeUint8(1,3),b.writeUint8(q.byteLength>>16,4),b.writeUint16BE(q.byteLength&65535,5),b=Buffer.concat([b,q,v])):b=Buffer.from(v);const c=A?0:b.length,f=Buffer.alloc(c+3+a.byteLength);A||(f.set(b),A=!0);f.writeUInt8(a.byteLength>>16,c);f.writeUInt16BE(65535&a.byteLength,c+1);f.set(a,c+3);return f},decodeFrame:async(a,b)=>
{var c;const f=()=>{if(3<=d.length)return d.readUInt8()<<16|d.readUInt16BE(1)};d=Buffer.concat([d,a]);p.trace(`recv ${a.length} bytes, total recv ${d.length} bytes`);for(a=f();a&&d.length>=a+3;){let l=d.slice(3,a+3);d=d.slice(a+3);g&&(a=t(l),l=await (0,WABinary_1.decodeBinaryNode)(a));p.trace({msg:null===(c=null===l||void 0===l?void 0:l.attrs)||void 0===c?void 0:c.id},"recv frame");b(l);a=f()}}}};exports.makeNoiseHandler=makeNoiseHandler;
